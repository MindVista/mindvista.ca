---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import BaseLayout from "@layouts/BaseLayout.astro";
import SearchBar from "@components/search/SearchBar.astro";

// Get all clubs and sort by name
const clubs: CollectionEntry<"clubs">[] = (await getCollection("clubs")).sort((a: CollectionEntry<"clubs">, b: CollectionEntry<"clubs">) => a.data.name.localeCompare(b.data.name));

// Get unique categories and their tags
const categories = new Map<string, Set<string>>();
clubs.forEach((club) => {
    if (club.data.categories) {
        Object.entries(club.data.categories as Record<string, string[]>).forEach(([category, tags]) => {
            if (!categories.has(category)) {
                categories.set(category, new Set());
            }
            tags.forEach((tag) => categories.get(category)?.add(tag));
        });
    }
});

// Convert to array and sort
const sortedCategories = Array.from(categories.entries())
    .sort(([a], [b]) => a.localeCompare(b))
    .map(([category, tags]) => ({
        name: category,
        tags: Array.from(tags).sort(),
    }));
---

<BaseLayout pageTitle="Clubs Directory" description="Browse and filter through MindVista's collection of clubs!" suffix={true}>
    <div class="mx-auto mb-14 max-w-7xl px-4 py-8 sm:px-8 md:px-12 lg:px-20">
        <header class="mb-8 mt-8 text-center">
            <h1 class="mb-4 text-4xl font-bold text-cText">Clubs Directory</h1>
            <p class="text-lg text-cTextOffset">Browse and filter through all available clubs.</p>
        </header>

        <!-- Search -->
        <SearchBar id="clubs-search" placeholder="Search clubs..." />

        <!-- Filters -->
        <div class="mb-8">
            <button class="flex w-full items-center justify-between rounded-lg border border-cBorder bg-cBackgroundOffset p-4 text-left hover:bg-cBackground" data-toggle="filters-panel">
                <div class="flex items-center gap-2">
                    <h2 class="text-2xl font-semibold text-cText">Filters</h2>
                    <span class="text-sm text-cTextOffset" id="active-filters-count"></span>
                </div>
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 transform text-cText transition-transform" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                </svg>
            </button>
            <div id="filters-panel" class="mt-2 hidden rounded-lg border border-cBorder bg-cBackgroundOffset p-6">
                <div class="space-y-4">
                    <!-- Status Filter -->
                    <div class="filter-section">
                        <button class="flex w-full items-center justify-between text-left" data-toggle="status">
                            <h3 class="font-medium text-cText">Status</h3>
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 transform text-cText transition-transform" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                            </svg>
                        </button>
                        <div class="filter-content mt-3 hidden" id="status-filter">
                            <div class="flex flex-wrap gap-4">
                                <label class="inline-flex cursor-pointer items-center rounded-full bg-blue-50 px-3 py-1 text-sm text-blue-800 transition-colors hover:bg-blue-100 dark:bg-blue-900 dark:text-blue-100 dark:hover:bg-blue-800 [&:has(input:checked)]:bg-blue-200 [&:has(input:checked)]:text-blue-900 dark:[&:has(input:checked)]:bg-blue-700 dark:[&:has(input:checked)]:text-blue-50">
                                    <input type="checkbox" class="form-checkbox hidden" value="active" />
                                    <span>Active</span>
                                </label>
                                <label class="inline-flex cursor-pointer items-center rounded-full bg-blue-50 px-3 py-1 text-sm text-blue-800 transition-colors hover:bg-blue-100 dark:bg-blue-900 dark:text-blue-100 dark:hover:bg-blue-800 [&:has(input:checked)]:bg-blue-200 [&:has(input:checked)]:text-blue-900 dark:[&:has(input:checked)]:bg-blue-700 dark:[&:has(input:checked)]:text-blue-50">
                                    <input type="checkbox" class="form-checkbox hidden" value="inactive" />
                                    <span>Inactive</span>
                                </label>
                            </div>
                        </div>
                    </div>

                    <!-- Category Filters -->
                    {
                        sortedCategories.map((category) => (
                            <div class="filter-section">
                                <button class="flex w-full items-center justify-between text-left" data-toggle={category.name}>
                                    <h3 class="font-medium capitalize text-cText">{category.name.replace("_", " ")}</h3>
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 transform text-cText transition-transform" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                                <div class="filter-content mt-3 hidden" id={`${category.name}-filter`}>
                                    <div class="flex flex-wrap gap-2">
                                        {category.tags.map((tag) => (
                                            <label class="inline-flex cursor-pointer items-center rounded-full bg-blue-50 px-3 py-1 text-sm text-blue-800 transition-colors hover:bg-blue-100 dark:bg-blue-900 dark:text-blue-100 dark:hover:bg-blue-800 [&:has(input:checked)]:bg-blue-200 [&:has(input:checked)]:text-blue-900 dark:[&:has(input:checked)]:bg-blue-700 dark:[&:has(input:checked)]:text-blue-50">
                                                <input type="checkbox" class="form-checkbox hidden" data-category={category.name} value={tag} />
                                                <span>{tag}</span>
                                            </label>
                                        ))}
                                    </div>
                                </div>
                            </div>
                        ))
                    }
                </div>
            </div>
        </div>

        <!-- Results -->
        <div class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3" id="results">
            {
                clubs.map((club) => (
                    <a href={`/clubs/${club.id}`} class="block rounded-lg border border-cBorder bg-cBackgroundOffset p-6 shadow transition-shadow hover:shadow-md" data-status={club.data.status} data-categories={JSON.stringify(club.data.categories)}>
                        <div class="mb-2 flex items-center justify-between">
                            <h3 class="text-xl font-semibold text-cText">{club.data.name}</h3>
                            <span class={`rounded-full px-2 py-1 text-xs font-medium ${club.data.status === "active" ? "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100" : "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-100"}`}>{club.data.status.charAt(0).toUpperCase() + club.data.status.slice(1)}</span>
                        </div>
                        <p class="line-clamp-3 text-cTextOffset">{club.data.description}</p>
                    </a>
                ))
            }
        </div>
    </div>
</BaseLayout>

<script>
    // Update active filters count
    function updateActiveFiltersCount() {
        const activeFilters = document.querySelectorAll('input[type="checkbox"]:checked').length;
        const countElement = document.getElementById("active-filters-count");
        if (countElement) {
            countElement.textContent = activeFilters > 0 ? `(${activeFilters} active)` : "";
        }
    }

    // Collapsible panel logic
    const panelButton = document.querySelector('[data-toggle="filters-panel"]');
    const panel = document.getElementById("filters-panel");
    const panelArrow = panelButton?.querySelector("svg");

    panelButton?.addEventListener("click", () => {
        panel?.classList.toggle("hidden");
        if (panelArrow) {
            panelArrow.style.transform = panel?.classList.contains("hidden") ? "rotate(0deg)" : "rotate(180deg)";
        }
    });

    // Initialize with filters panel collapsed
    // panel?.classList.remove("hidden");
    // if (panelArrow) panelArrow.style.transform = "rotate(180deg)";

    // Search functionality
    const searchInput = document.getElementById("clubs-search") as HTMLInputElement;
    searchInput?.addEventListener("input", updateResults);

    // Update results
    function updateResults() {
        const searchTerm = (searchInput?.value || "").toLowerCase();
        const statusFilters = Array.from<HTMLInputElement>(document.querySelectorAll('input[type="checkbox"][value="active"], input[type="checkbox"][value="inactive"]'))
            .filter((checkbox) => checkbox.checked)
            .map((checkbox) => checkbox.value);

        const categoryFilters = new Map();
        document.querySelectorAll<HTMLInputElement>('input[type="checkbox"][data-category]').forEach((cb) => {
            const category = cb.dataset.category!;
            if (!categoryFilters.has(category)) {
                categoryFilters.set(category, new Set());
            }
            if (cb.checked) {
                categoryFilters.get(category).add(cb.value);
            }
        });

        document.querySelectorAll<HTMLElement>("#results > a").forEach((item) => {
            const status = item.dataset.status!;
            const categories = JSON.parse(item.dataset.categories || "{}");

            // Status filtering - show only if no status filters or status matches
            const statusMatch = statusFilters.length === 0 || statusFilters.includes(status);

            // Category filtering - show only if item has the selected tags
            const categoryMatch = Array.from(categoryFilters.entries()).every(([category, selectedTags]) => {
                // If no tags are selected for this category, it's a match
                if (selectedTags.size === 0) return true;

                // If tags are selected but item doesn't have this category, it's not a match
                if (!categories || !categories[category]) return false;

                // Check if item has at least one of the selected tags
                return Array.from(selectedTags).some((tag) => categories[category].includes(tag));
            });

            const nameElement = item.querySelector("h3");
            const descriptionElement = item.querySelector("p");

            const name = nameElement ? (nameElement.textContent?.toLowerCase() ?? "") : "";
            const description = descriptionElement ? (descriptionElement.textContent?.toLowerCase() ?? "") : "";

            const matchesSearch = searchTerm === "" || name.includes(searchTerm) || description.includes(searchTerm);

            item.style.display = matchesSearch && statusMatch && categoryMatch ? "block" : "none";
        });

        updateActiveFiltersCount();
    }

    // Add event listeners
    document.querySelectorAll<HTMLInputElement>('input[type="checkbox"]').forEach((checkbox) => {
        checkbox.addEventListener("change", () => {
            updateResults();
            updateActiveFiltersCount();
        });
    });

    // Initialize with all checkboxes unchecked
    document.querySelectorAll<HTMLInputElement>('input[type="checkbox"]').forEach((checkbox) => {
        checkbox.checked = false;
    });

    // Initialize display
    updateResults();
    updateActiveFiltersCount();

    // Collapsible sections logic
    document.querySelectorAll("[data-toggle]").forEach((button) => {
        button.addEventListener("click", () => {
            const section = button.getAttribute("data-toggle")!;
            const content = document.getElementById(`${section}-filter`)!;
            const arrow = button.querySelector("svg")!;

            // Toggle the content
            content.classList.toggle("hidden");

            // Rotate the arrow
            arrow.style.transform = content.classList.contains("hidden") ? "rotate(0deg)" : "rotate(180deg)";
        });
    });

    // Initialize with all sections collapsed
    document.querySelectorAll(".filter-content").forEach((content) => {
        content.classList.add("hidden");
    });
    document.querySelectorAll("[data-toggle] svg").forEach((element) => {
        const arrow = element as SVGElement;
        arrow.style.transform = "rotate(0deg)";
    });
</script>
